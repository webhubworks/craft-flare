{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * Flare plugin for Craft CMS 4.x & 5.x
 *
 * Flare Settings.twig
 *
 * @author    webhub GmbH
 * @copyright Copyright (c) 2019 webhub GmbH
 * @link      https://webhub.de
 * @package   Flare
 * @since     1.0.0
 */
#}

{% set config = craft.app.config.getConfigFromFile('craft-flare') %}

{% import "_includes/forms" as forms %}
{% from 'craft-flare/_macros' import configWarning %}

{{ forms.lightswitchField({
    label: "Enabled"|t('craft-flare'),
    id: 'is-enabled',
    name: 'isEnabled',
    on: settings['isEnabled'],
    instructions: 'With this setting enabled, we will be sending exceptions to Flare.'|t('craft-flare'),
    errors: settings.getErrors('isEnabled'),
    warning: (config.isEnabled is defined ? configWarning('isEnabled')),
    disabled: config.isEnabled is defined,
}) }}

{{ forms.autosuggestField({
    label: "Flare API Key"|t('craft-flare'),
    id: 'flare-key',
    name: 'flareKey',
    value: settings['flareKey'],
    suggestEnvVars: true,
    instructions: 'After you have created a new project in {link}, you are given a project specific Flare API key. Please insert this here.'|t('craft-flare', {link: '<a href="https://flareapp.io/projects" rel="noopener" target="_blank">Flare</a>'}),
    errors: settings.getErrors('flareKey'),
    warning: (config.flareKey is defined ? configWarning('flareKey')),
    disabled: config.flareKey is defined,
}) }}

<h4>Front-End Error Tracking</h4>
<p>In case, you would like to also report front-end/JavaScript errors to Flare, please see their <a href="https://flareapp.io/docs/integration/javascript-error-tracking/installation" target="_blank">documentation</a>.</p>
<hr>

{{ forms.lightswitchField({
    label: "Anonymize IP"|t('craft-flare'),
    id: 'anonymize-ip',
    name: 'anonymizeIp',
    on: settings['anonymizeIp'],
    instructions: 'With this setting enabled, the IP address of the request will be anonymized before being sent to Flare.'|t('craft-flare'),
    errors: settings.getErrors('anonymizeIp'),
    warning: (config.isEnabled is defined ? configWarning('anonymizeIp')),
    disabled: config.anonymizeIp is defined,
}) }}

{#{{ forms.textField({
    label: "Error levels to report"|t("craft-flare"),
    id: "reportErrorLevels",
    instructions: "Check {link} for available values. Please use {calculatorLink} to calculate the value. Our default is \"E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_USER_DEPRECATED & ~E_WARNING\""|t("craft-flare", {
        link: '<a href="https://www.php.net/manual/en/errorfunc.constants.php" rel="noopener" target="_blank">the documentation</a>',
        calculatorLink: '<a href="https://maximivanov.github.io/php-error-reporting-calculator/" rel="noopener" target="_blank">this online calculator</a>',
    }),
    value: settings['reportErrorLevels'],
    name: "reportErrorLevels",
    errors: settings.getErrors("reportErrorLevels"),
}) }}#}

{{ forms.editableTableField({
    label: "Fields to censor"|t("craft-flare"),
    id: "censorRequestBodyFields",
    name: "censorRequestBodyFields",
    instructions: "Set which request fields should be censored before sending them to Flare."|t("craft-flare"),
    allowAdd: true,
    allowDelete: true,
    static: config.censorRequestBodyFields is defined,
    addRowLabel: "Add a field"|t("craft-flare"),
    cols: {
        fieldName: {
            heading: "Field Name"|t("craft-flare"),
            type: "singleline",
        },
    },
    rows: settings.getCensorRequestBodyFields(settings['censorRequestBodyFields']),
    errors: settings.getErrors('censorRequestBodyFields'),
    warning: (config.censorRequestBodyFields is defined ? configWarning('censorRequestBodyFields')),
}) }}